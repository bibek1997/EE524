# -*- coding: utf-8 -*-
"""Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BBDFFY_hxzXuXcEAhGDDlDmu3Lrg8Lcc
"""

print("Hello World!")

a = int(input("Enter a: "))
b = int(input("Enter b: "))

c = a+b
print("c=a+b: "+str(c))

d = a-b
print("d=a-b: "+str(d))

e = a*b
print("e=a*b: "+str(e))

f = a/b
print("f=a/b: "+str(f))

g = a%b
print("g=a%b: "+str(g))

n = int(input("Enter a number: "))
result = 1
for i in range(1,n+1):
    result = result*i
    
print("Factorial of "+str(n)+" is: "+str(result))

def isprime(i):
    flag = 0
    for j in range(2,i):
        if i%j == 0:
            flag = 1
    
    return flag


a = int(input("Enter a: "))
b = int(input("Enter b: "))

for i in range(a, b+1):
    flag = isprime(i)
    if flag == 0:
        print(i)

num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))

max_num = max(num1, num2)

while(1):
    i=2
    if (max_num % num1 == 0) and (max_num % num2 == 0):
        print("LCM of "+str(num1)+" & "+str(num2)+" is "+str(max_num))
        break
    max_num = max_num * i
    i+=1

arr = [5,10,6,4,7,3,1,9,11,54,32,8,20,2,87]
brr = arr.copy()
li = []

for i in range(0,15):
    for j in range(0,15):
        if arr[i] > arr[j]:
            temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp

print("Original list:")
print(brr)

print("Sorted list:")
print(arr)

for i in range(0,15):
    for j in range(0,15):
        if arr[i]==brr[j]:
            li.append([i,j])

print("Sorted indices:")
print(li)

import numpy as np

arr = np.array([5,10,6,4,7,3,1,9,11,54,32,8,20,2,87])

print("Original array:")
print(arr)
print("Sorted array:")
print(np.sort(arr))

print("Sorted indices:")
print(np.argsort(arr))

from numpy import random

m = int(input("Enter m: "))
n = int(input("Enter n: "))

arr = random.randint(-2,5,size=(m,n))

print(arr)

import numpy as np

X = [[1,2,3],
    [4 ,5,6]]

Y = [[1,2],
     [3,4],
     [5,6]]

result = [[0,0],
         [0,0]]

res = np.dot(X,Y)

for i in range(len(X)):
   for j in range(len(Y[0])):
       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]

print(result)
print(res)

from numpy import random
from numpy import savetxt

X = random.randint(100, size=(10,100))

print(X)

savetxt('data.csv', X, delimiter=',')

from numpy import loadtxt
import numpy as np
import statistics

X = loadtxt('data.csv', delimiter=',')

mu = np.mean(X, axis=1)

#print(mu)

c = []

for i in range(10):
    t = X[i] - mu[i]
    c.append(t)
        
c = np.array(c)

C = np.dot(c,c.T)

c = c/100

print(C)

import math
class Complex(object):
    def __init__(self, real, imag=0.0):
        self.real = real
        self.imag = imag

    def __add__(self, other):
        return Complex(self.real + other.real, self.imag + other.imag)

    def __sub__(self, other):
        return Complex(self.real - other.real, self.imag - other.imag)

    def __mul__(self, other):
        return Complex(self.real*other.real - self.imag*other.imag, self.imag*other.real + self.real*other.imag)

    def __div__(self, other):
        sr, si, or1, oi = self.real, self.imag, other.real, other.imag 
        r = float(or1**2 + oi**2)
        return Complex((sr*or1+si*oi)/r, (si*or1-sr*oi)/r)

    def __abs__(self):
        return math.sqrt(self.real**2 + self.imag**2)
        
    def __angle__(self):
        if(self.real > 0):
            return math.atan(self.imag/self.real)
        elif(self.real < 0 and self.imag >= 0):
            return math.pi + math.atan(self.imag/self.real)
        elif(self.real < 0 and self.imag < 0):
            return math.atan(self.imag/self.real) - math.pi
        elif(self.real == 0 and self.imag > 0):
            return math.pi/2
        elif(self.real == 0 and self.imag < 0):
            return  -math.pi/2
        elif(self.real == 0 and self.imag == 0):
            return  "indeterminate"
            
    def __str__(self):
        return '(%g, %g)' % (self.real, self.imag)

c1=Complex(3,4)
c2=Complex(5,6)
print("Sum: "+str(c1.__add__(c2)))
print("Difference: "+str(c1.__sub__(c2)))
print("Product: "+str(c1.__mul__(c2)))
print("Quotent: "+str(c1.__div__(c2)))
print("Absolute value of c1: "+str(c1.__abs__()))
print("Absolute value of c2: "+str(c2.__abs__()))
print("Angle of c1: "+str(c1.__angle__()))
print("Angle of c2: "+str(c2.__angle__()))

import matplotlib.pyplot as plt
import numpy as np

x = np.array(range(-10,10))
y = 3*x+2

plt.plot(x,y)


plt.show()

import math

def checkpoint( h, k, x, y, a, b): 
  
    # checking the equation of 
    # ellipse with the given point 
    p = ((math.pow((x - h), 2) / math.pow(a, 2)) + 
         (math.pow((y - k), 2) / math.pow(b, 2))) -1
  
    return p

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import random

fig,ax = plt.subplots(1)
ax.set_aspect('equal')

# The ellipse
g_ell_center = (5.0, -5.0)
g_ell_width = 10
g_ell_height = 5
angle = 0.

g_ellipse = patches.Ellipse(g_ell_center, g_ell_width, g_ell_height, angle=angle, fill=False, edgecolor='black', linewidth=2)
ax.add_patch(g_ellipse)

x = []
y = []

for i in range(100):
  x.append(random.uniform(-10,10))
  y.append(random.uniform(-10,10))

X = []
Y = []

for i in range(100):
  if(checkpoint(5, -5, x[i], y[i], 10, 5) <= 0):
    X.append(x[i])
    Y.append(y[i])


ax.scatter(X,Y,color='r')

plt.show()